#!/usr/bin/env node

'use strict';

const path = require("path");
const util = require("util");
const fs = require("fs");

const chalk = require("chalk"); // 修改控制台字符串的样式(字体样式、字体颜色、背景颜色)
const commander = require("commander"); // Node.js命令行工具包
const pkg = require("../package.json");

const constants = require("../lib/constants"); // 常量配置文件
const convert = require("../lib/util/convert"); // 格式转换
const CLI = require("../lib/CLI"); // 执行入口

const TMAConfigure = require("tma-config-parser"); // 配置文件解析器

const split = function(val) {
    return val.split(' '); // 以空格分割成数组
};

const jsonParse = function(val) {
    try {
        return JSON.parse(val);
    } catch (e) {
        return '';
    }
};

const aliveParse = function(val) {
    if (val === "off") {
        return 0;
    }
    return parseInt(val);
};

const instancesParse = function(val) {
    if (val === 'max') {
        return -1;
    }
    if (val === 'auto') {
        return 0;
    }
    val = parseInt(val);
    if (isNaN(val) || val < 0) {
        return 0;
    } else {
        return val;
    }
};

const toBoolean = function(val) {
    if (typeof val === 'string') {
        return val === 'on';
    } else {
        return false;
    }
};

const existsSync = function(path) {
    try {
        fs.statSync(path);
        return true;
    } catch(e) {
        return false;
    }
};

const parseConfig = function(script, file) {
    let TMAConfig = new TMAConfigure();
    let opts = {
        config: file
    };
    let serverObj;
    TMAConfig.parseFile(file);
    serverObj = TMAConfig.get('tma.application', {});
    [
        'run-as-user',
        'run-as-group',
        {
            org: 'asyncthread',
            dest: 'instances',
            coercion: instancesParse,
            domain: 'client'
        },
        {
            org: 'instances',
            coercion: instancesParse
        },
        {
            org: 'script-args',
            coercion: split
        },
        {
            org: 'node-args',
            coercion: split
        },
        {
            org: 'max-memory-restart',
            coercion: parseInt
        },
        {
            org: 'deactivating-timeout',
            dest: 'graceful-shutdown',
            coercion: parseInt
        },
        {
            org: 'exception-max',
            coercion: parseInt
        },
        {
            org: 'exception-time',
            coercion: parseInt
        },
        {
            org: 'keepalive-time',
            coercion: aliveParse
        },
        {
            org: 'logpath',
            dest: 'log'
        },
        {
            org: 'logsize',
            dest: 'applog-max-size',
            coercion: convert.friendlyformat
        },
        {
            org: 'loglevel',
            dest: 'applog-level'
        },
        {
            org: 'node',
            dest: 'tma-node'
        }
    ]
};


