#!/usr/bin/env node

'use strict';

const path = require("path");
const util = require("util");
const fs = require("fs");

const chalk = require("chalk"); // 修改控制台字符串的样式(字体样式、字体颜色、背景颜色)
const commander = require("commander"); // Node.js命令行工具包
const pkg = require("../package.json");

const constants = require("../lib/constants"); // 常量配置文件
const convert = require("../lib/util/convert"); // 格式转换
const CLI = require("../lib/CLI"); // 执行入口

const TMAConfigure = require("tma-config-parser"); // 配置文件解析器

const split = function(val) {
    return val.split(' '); // 以空格分割成数组
};

const jsonParse = function(val) {
    try {
        return JSON.parse(val);
    } catch (e) {
        return '';
    }
};

const aliveParse = function(val) {
    if (val === "off") {
        return 0;
    }
    return parseInt(val);
};

const instancesParse = function(val) {
    if (val === 'max') {
        return -1;
    }
    if (val === 'auto') {
        return 0;
    }
    val = parseInt(val);
    if (isNaN(val) || val < 0) {
        return 0;
    } else {
        return val;
    }
};

const toBoolean = function(val) {
    if (typeof val === 'string') {
        return val === 'on';
    } else {
        return false;
    }
};

const existsSync = function(path) {
    try {
        fs.statSync(path);
        return true;
    } catch(e) {
        return false;
    }
};

const parseConfig = function(script, file) {
    let TMAConfig = new TMAConfigure();
    let opts = {
        config: file
    };
    let serverObj;
    TMAConfig.parseFile(file);
    serverObj = TMAConfig.get('tma.application', {});
    [
        'run-as-user',
        'run-as-group',
        {
            org: 'asyncthread',
            dest: 'instances',
            coercion: instancesParse,
            domain: 'client'
        },
        {
            org: 'instances',
            coercion: instancesParse
        },
        {
            org: 'script-args',
            coercion: split
        },
        {
            org: 'node-args',
            coercion: split
        },
        {
            org: 'max-memory-restart',
            coercion: parseInt
        },
        {
            org: 'deactivating-timeout',
            dest: 'graceful-shutdown',
            coercion: parseInt
        },
        {
            org: 'exception-max',
            coercion: parseInt
        },
        {
            org: 'exception-time',
            coercion: parseInt
        },
        {
            org: 'keepalive-time',
            coercion: aliveParse
        },
        {
            org: 'logpath',
            dest: 'log'
        },
        {
            org: 'logsize',
            dest: 'applog-max-size',
            coercion: convert.friendlyformat
        },
        {
            org: 'loglevel',
            dest: 'applog-level'
        },
        {
            org: 'node',
            dest: 'tma-node'
        },
        {
            org: 'local',
            dest: 'tma-local'
        },
        {
            org: 'tma-monitor',
            coercion: toBoolean
        },
        {
            org: 'tma-monitor-http-threshold',
            coercion: aliveParse
        },
        {
            org: 'tma-monitor-http-seppath',
            coercion: toBoolean
        },
        {
            org: 'long-stack',
            coercion: toBoolean
        }
    ].forEach((item) => {
        let value = (serverObj[item.domain || 'server'] || {})[item.org || item];
        if (value) {
            opts[convert.camelcase(item.dest || item.org || item)] = item.coercion ? item.coercion(value) : value;
        }
    });
    opts['name'] = TMAConfig.get('tma.application.server.app', constants.TMA_DEFAULT_APP) + '.' + TMAConfig.get("tma.application.server.server", path.basename(script, path.extname(script)));
    if (typeof serverObj.isdocker === "string" && serverObj.isdocker.toLowerCase() === 'y' && serverObj.container) {
        opts['container'] = serverObj.container;
    }

    if (serverObj['server']) {
        Object.getOwnPropertyNames(serverObj['server']).some((key) => {
            if (serverObj['server'][key] && typeof serverObj['server'][key] === 'object' && serverObj['server'][key].protocol === 'not_tma') {
                opts[convert.camelcase('http-address')] = serverObj['server'][key].endpoint.match(/\-h\s([^\s]+)/)[1] + ':' + serverObj['server'][key].endpoint.match(/\-p\s[^\s]+)/)[1];
                return true;
            }
            return false;
        });
    }
    return opts;
};

const parsePackage = function(file) {
    if (!scriptPkg) {
        scriptPkg = require(file);
    }
    scriptPkg.nodeEyes = scriptPkg.nodeEyes || {};
    if (scriptPkg.name) {
        scriptPkg.nodeEyes.name = scriptPkg.name;
    }
    return scriptPkg.nodeEyes;
};

const error = function(str, code) {
    console.error(chalk.red(str));
    process.exit(code || 0);
};

commander
    .version(pkg.version)
    .option('-c, --config <config>','specify tma config file.NOTE:independent config will be override this')
    .option('-n --name <name>', 'set a <name> for script -e.g. app.servername')
    .option('-l, --log <path>', 'specify log file')
    .option('-i, --instances <number>', 'launch [number] instances (for networked app)(load balanced)', instancesParse)
    .option('--env <environment_name>', 'specify environment to get specific env variables (for JSON declaration)', jsonParse)
    .option('--http-address <http_address>', 'specify http ip:port address to pass to script -e.g. 127.0.0.1:80')
    .option('--script-args <script_args>', "space delimited arguments to pass to script -e.g. --use=\"https\"", split)
    .option('--node-args <node_args>', "space delimited arguments to pass to node -e.g. --node-args=\"--debug=9001 --trace-deprecation\"", split)
    .option('--run-as-user <run_as_user>', 'The user or uid to run a managed process as')
    .option('--run-as-group <run_as_group>', 'The group or gid to run a managed process as')
    .option('--max-memory-restart <memory>', 'specify max memory amount used to autorestart (in megaoctets)', parseInt)
    .option('--graceful-shutdown <graceful>', util.format('specify graceful shutdown timeout (in millisecond), default is %sms', constants.GRACEFUL_TIMEOUT), parseInt)
    .option('--exception-max <exp_max>', util.format('The program will be terminated if an exceeding max exception count, default is %s', constants.EXCEPTION_TOTAL), parseInt)
    .option('--exception-time <exp_time>', util.format('The program will be terminated if and exception occurs within a particular period of time, default is %sms', constants.EXCEPTION_TIME), parseInt)
    .option('--applog-max-files <applog_max_files>', util.format('specify max number of rolling log, default is %s', constants.APPLOG_MAX_FILES), parseInt)
    .option('--applog-max-size <applog_max_size>', util.format('specify max file size for each rolling log, use human readable unit in [K|G|M], default is %s', convert.byteformat(constants.APPLOG_MAX_SIZE)), convert.friendlyformat)
    .option('--applog-level <applog_level>', util.format('define log level, default is %s', constants.APPLOG_LEVEL))
    .option('--tam-node <tma_node>', 'set tma node connection string, eyes would send notifications to tma node -e.g. tma.tmanode.ServerObj@tcp -h 10.11.10.12 - p 12555 -t 60000')
    .option('--tma-local <tma_local>', 'set local interface setup string, eyes would receive the notifications from tma node -e.g. tcp -h 127.0.0.1 -p 13001 -t 3000')
    .option('--tma-monitor <tma_monitor>', util.format('enable or disable service monitor running in tma platform, and the default value is %s', constants.TMA_MONITOR ? 'on' : 'off'), toBoolean)
    .option('--tma-monitor-http-threshold <http_threshold>', util.format('if the http(s) status code is large than the preseted threshold then this request will be considered error. default threshold is %s, set it "off" to disabled', constants.TMA_MONITOR_HTTP_THRESHOLD), aliveParse)
    .option('--tma-monitor-http-seppath <http_seppath>', util.format('separate url pathname as interface name, default is %s', constants.TMA_MONITOR_HTTP_SEPPATH ? 'on' : 'off'), toBoolean)
    .option('--tma-monitor-http-socketerr <http_socketerr>', util.format('considered socket error as error, default is %s', constants.TMA_MONITOR_HTTP_SOCKETERR ? 'on' : 'off'), toBoolean)
    .option('--long-stack <long_stack>', util.format('enable long stack trace to auto append asynchronous stack, default is %s', constants.LONG_STACK ? 'on' : 'off'), toBoolean)
    .option('--long-stack-filter-usercode <stack_usercode>', util.format('filter long stack trace keep user module code only, default is %s', constants.LONG_STACK_FILTER_USERCODE ? 'on' : 'off'), toBoolean)
    .usage('app.js [options]')
    .parse(process.argv);

if (process.argv.length == 2) {
    commander.parse(process.argv);
    commander.outputHelp();
    process.exit(0);
}

if (!commander.args[0]) {
    error('>> The script is NOT specified.');
    return;
}
let scriptStat;
let scriptPkg;
let entrypoint;
let configOpt;

try {
    scriptStat = fs.statSync(commander.args[0]);
} catch(e) {
    error('>> Can NOT find the script or directory');
    return;
}

if (scriptStat.isFile() && path.extname(commander.args[0]).toLowerCase() === '.js') {
    entrypoint = path.resolve(commander.args[0]);
} else if (scriptStat.isDirectory()) {
    if (existsSync(path.resolve(commander.args[0], 'package.json'))) {
        try {
            scriptPkg = require(path.resolve(commander.args[0], 'package.json'));
        } catch(e) {
        }
        if (scriptPkg && scriptPkg.nodeEyes && scriptPkg.nodeEyes.main) {
            entrypoint = path.resolve(commander.args[0], scriptPkg.nodeEyes.main);
        } else if (scriptPkg && scriptPkg.scripts && scriptPkg.scripts.start && scriptPkg.scripts.start.indexOf('node ') === 0) {
            entrypoint = path.resolve(commander.args[0], scriptPkg.scripts.start.slice(5));
        } else if (scriptPkg && scriptPkg.main) {
            entrypoint = path.resolve(commander.args[0], scriptPkg.main);
        }
    }

    if (!entrypoint) {
        constants.ENTRY_POINT_NAME.some((name) => {
            if (existsSync(path.resolve(commander.args[0], name))) {
                return true;
            } else {
                return false;
            }
        });
    }

    if (!entrypoint) {
        error('>> Can NOT find the entry point in the directory');
        return;
    }
} else {
    error('>> The script is neither a file nor a directory');
    return;
}

if (!existsSync(entrypoint)) {
    error(util.format('>> Can NOT find the entrypoint(%s) in the file system', entrypoint));
    return;
}


