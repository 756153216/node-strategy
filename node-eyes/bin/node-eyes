#!/usr/bin/env node

'use strict';

const path = require("path");
const util = require("util");
const fs = require("fs");

const chalk = require("chalk"); // 修改控制台字符串的样式(字体样式、字体颜色、背景颜色)
const commander = require("commander"); // Node.js命令行工具包
const pkg = require("../package.json");

const constants = require("../lib/constants"); // 常量配置文件
const convert = require("../lib/util/convert"); // 格式转换
const CLI = require("../lib/CLI"); // 执行入口

const TMAConfigure = require("tma-config-parser"); // 配置文件解析器

const split = function(val) {
    return val.split(' '); // 以空格分割成数组
};

const jsonParse = function(val) {
    try {
        return JSON.parse(val);
    } catch (e) {
        return '';
    }
};

const aliveParse = function(val) {
    if (val === "off") {
        return 0;
    }
    return parseInt(val);
};

const instancesParse = function(val) {
    if (val === 'max') {
        return -1;
    }
    if (val === 'auto') {
        return 0;
    }
    val = parseInt(val);
    if (isNaN(val) || val < 0) {
        return 0;
    } else {
        return val;
    }
};

const toBoolean = function(val) {
    if (typeof val === 'string') {
        return val === 'on';
    } else {
        return false;
    }
};

const existsSync = function(path) {
    try {
        fs.statSync(path);
        return true;
    } catch(e) {
        return false;
    }
};

const parseConfig = function(script, file) {
    let TMAConfig = new TMAConfigure();
    let opts = {
        config: file
    };
    let serverObj;
    TMAConfig.parseFile(file);
    serverObj = TMAConfig.get('tma.application', {});
    [
        'run-as-user',
        'run-as-group',
        {
            org: 'asyncthread',
            dest: 'instances',
            coercion: instancesParse,
            domain: 'client'
        },
        {
            org: 'instances',
            coercion: instancesParse
        },
        {
            org: 'script-args',
            coercion: split
        },
        {
            org: 'node-args',
            coercion: split
        },
        {
            org: 'max-memory-restart',
            coercion: parseInt
        },
        {
            org: 'deactivating-timeout',
            dest: 'graceful-shutdown',
            coercion: parseInt
        },
        {
            org: 'exception-max',
            coercion: parseInt
        },
        {
            org: 'exception-time',
            coercion: parseInt
        },
        {
            org: 'keepalive-time',
            coercion: aliveParse
        },
        {
            org: 'logpath',
            dest: 'log'
        },
        {
            org: 'logsize',
            dest: 'applog-max-size',
            coercion: convert.friendlyformat
        },
        {
            org: 'loglevel',
            dest: 'applog-level'
        },
        {
            org: 'node',
            dest: 'tma-node'
        },
        {
            org: 'local',
            dest: 'tma-local'
        },
        {
            org: 'tma-monitor',
            coercion: toBoolean
        },
        {
            org: 'tma-monitor-http-threshold',
            coercion: aliveParse
        },
        {
            org: 'tma-monitor-http-seppath',
            coercion: toBoolean
        },
        {
            org: 'long-stack',
            coercion: toBoolean
        }
    ].forEach((item) => {
        let value = (serverObj[item.domain || 'server'] || {})[item.org || item];
        if (value) {
            opts[convert.camelcase(item.dest || item.org || item)] = item.coercion ? item.coercion(value) : value;
        }
    });
    opts['name'] = TMAConfig.get('tma.application.server.app', constants.TMA_DEFAULT_APP) + '.' + TMAConfig.get("tma.application.server.server", path.basename(script, path.extname(script)));
    if (typeof serverObj.isdocker === "string" && serverObj.isdocker.toLowerCase() === 'y' && serverObj.container) {
        opts['container'] = serverObj.container;
    }

    if (serverObj['server']) {
        Object.getOwnPropertyNames(serverObj['server']).some((key) => {
            if (serverObj['server'][key] && typeof serverObj['server'][key] === 'object' && serverObj['server'][key].protocol === 'not_tma') {
                opts[convert.camelcase('http-address')] = serverObj['server'][key].endpoint.match(/\-h\s([^\s]+)/)[1] + ':' + serverObj['server'][key].endpoint.match(/\-p\s[^\s]+)/)[1];
                return true;
            }
            return false;
        });
    }
    return opts;
};

const parsePackage = function(file) {
    if (!scriptPkg) {
        scriptPkg = require(file);
    }
    scriptPkg.nodeEyes = scriptPkg.nodeEyes || {};
    if (scriptPkg.name) {
        scriptPkg.nodeEyes.name = scriptPkg.name;
    }
    return scriptPkg.nodeEyes;
};

const error = function(str, code) {
    console.error(chalk.red(str));
    process.exit(code || 0);
};

commander
    .version(pkg.version)
    .option('-c, --config <config>','specify tma config file.NOTE:independent config will be override this')
    .option('-n --name <name>', 'set a <name> for script -e.g. app.servername')
    .option('-l, --log <path>', 'specify log file')
    .option('-i, --instances <number>', 'launch [number] instances (for networked app)(load balanced)', instancesParse)
    .option('--env <environment_name>', 'specify environment to get specific env variables (for JSON declaration)', jsonParse)
    .option('--http-address <http_address>', 'specify http ip:port address to pass to script -e.g. 127.0.0.1:80')
    .option('--script-args <script_args>', "space delimited arguments to pass to script -e.g. --use=\"https\"", split)
    .option('--node-args <node_args>', "space delimited arguments to pass to node -e.g. --node-args=\"--debug=9001 --trace-deprecation\"", split)
    .option('--run-as-user <run_as_user>', 'The user or uid to run a managed process as')
    .option('--run-as-group <run_as_group>', 'The group or gid to run a managed process as')
    .option('--max-memory-restart <memory>', 'specify max memory amount used to autorestart (in megaoctets)', parseInt)
    .option('--graceful-shutdown <graceful>', util.format('specify graceful shutdown timeout (in millisecond), default is %sms', constants.GRACEFUL_TIMEOUT), parseInt)
    .option('--exception-max <exp_max>', util.format('The program will be terminated if an exceeding max exception count, default is %s', constants.EXCEPTION_TOTAL), parseInt)
    .option('--exception-time <exp_time>', util.format('The program will be terminated if and exception occurs within a particular period of time, default is %sms', constants.EXCEPTION_TIME), parseInt)

